def update_class_proba(path):
    conn = sqlite3.connect(path)
    c = conn.cursor()
    cursor = c.execute('SELECT text, indexID FROM reuters_test_X')
    #Tuple of form (text,ID)
    all_rows = cursor.fetchall()
    #print(all_rows[:10])
    items = [dict( text=row[0], ID=row[1]) for row in cursor.fetchall()]
    #text = row[1] for row in cursor.fetchall()
    # <740x2097152 sparse matrix of type '<class 'numpy.float64'>'
    X = vect.transform(x[0] for x in all_rows)
    #array ([length 740]) # If I can just add an index here, I should be fine
    new_proba = list(clf.predict_proba(X)[:,1])
    IDs = list(np.arange(0, 740, 1))
    new_proba_tuple = list(zip(new_proba,IDs))
    # Try to insert instead of update. Probably better for my user study anyway. But if I do this, probably would want to do it after 5 pieces of feedback or something.
    #c.execute('ALTER TABLE reuters_test_X ADD COLUMN predict_proba_tplus1 REAL')
    #c.executemany('UPDATE reuters_test_X SET predict_proba_tplus1=? WHERE ID=?', ((val,ID) for val, ID in new_proba_tuple))
    #c.executemany('UPDATE reuters_test_X SET predict_proba_tplus1=? WHERE indexID=?)', new_proba_tuple)
    #c.executemany('UPDATE reuters_test_X SET predict_proba_tplus1=? WHERE indexID < 741', new_proba)
    #c.executemany('UPDATE reuters_test_X SET predict_proba_tplus1=?', new_proba_tuple)
    #c.executemany('UPDATE reuters_test_X SET predict_proba_tplus1=? WHERE ID=?', new_proba, IDs)
    #c.executemany('INSERT INTO reuters_test_X (predict_proba_tplus1) VALUES (?)', new_proba)
    for i in range(740):
        c.execute('UPDATE reuters_test_X SET predict_proba_tplus1=? WHERE indexID=?', new_proba, IDs)
    conn.commit()
    conn.close()